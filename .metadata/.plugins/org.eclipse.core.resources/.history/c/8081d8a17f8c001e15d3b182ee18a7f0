package com.voucherservice.service;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.voucherservice.client.VoucherRequestClient;
import com.voucherservice.dto.VoucherRequest;
import com.voucherservice.entity.Voucher;
import com.voucherservice.exception.DataIsNotInsertedException;
import com.voucherservice.exception.NoVoucherPresentException;
import com.voucherservice.helper.Excelhelper;
import com.voucherservice.repository.VoucherRepository;

@Service
@EnableFeignClients(basePackages = "com.*")
public class VoucherServiceImpl implements VoucherService {
	

	  private final VoucherRepository voucherRepo;
	    private final VoucherRequestClient reqClient;

	    @Autowired
	    public VoucherServiceImpl(VoucherRepository voucherRepo, VoucherRequestClient reqClient) {
	        this.voucherRepo = voucherRepo;
	        this.reqClient = reqClient;
	    }
	
	    @Override
	    public List<Voucher> saveAllVouchers(MultipartFile file) throws IOException, DataIsNotInsertedException {
	        List<Voucher> convertedList = Excelhelper.convertExcelToListOfVoucher(file.getInputStream());
	        
	        System.out.println(convertedList);
	        
	        List<Voucher> savedList = voucherRepo.saveAll(convertedList);

	        if (savedList.isEmpty()) {
	            throw new DataIsNotInsertedException();
	        }

	        return savedList;
	    }


	@Override
	public List<Voucher> getAllVouchers() throws NoVoucherPresentException {
		
		List<Voucher> list = voucherRepo.findAll();
		
		if(list.isEmpty())
		{
			throw new NoVoucherPresentException();
		}
		
		List<Voucher> availableList = new ArrayList<>();
		LocalDate today = LocalDate.now();
		
		for(Voucher v : list)
		{
			if (v.getExpiryDate().isAfter(today) && v.getIssuedTo() == null) {
	            availableList.add(v);
	        }
		}
		return availableList;
	}

	@Override
	public List<Voucher> getAllVoucherByExamName(String examName) throws NoVoucherPresentException {
	    List<Voucher> allVouchersAvailable = new ArrayList<>();
	    List<Voucher> allVouchersByName = voucherRepo.findByExamName(examName);

	    LocalDate currentDate = LocalDate.now();

	    for (Voucher v : allVouchersByName) {
	        if (v.getExpiryDate().isAfter(currentDate) && v.getIssuedTo() == null) {
	            allVouchersAvailable.add(v);
	        }
	    }

	    if (allVouchersAvailable.isEmpty()) {
	        throw new NoVoucherPresentException();
	    }

	    return allVouchersAvailable;
	}

 
	@Override
	public List<Voucher> getAllVoucherByCloudPlatform(String cloudPlatform) throws NoVoucherPresentException {
	    List<Voucher> allVouchersAvailable = new ArrayList<>();
	    LocalDate date = LocalDate.now();

	    for (Voucher v : voucherRepo.findByCloudPlatform(cloudPlatform)) {
	        if (v.getExpiryDate().isAfter(date) && v.getIssuedTo() != null) {
	            allVouchersAvailable.add(v);
	        }
	    }

	    if (allVouchersAvailable.isEmpty()) {
	        throw new NoVoucherPresentException();
	    }

	    return allVouchersAvailable;
	}


 
	@Override
	public List<Voucher> getAllExpiredVoucher() throws NoVoucherPresentException {
		List<Voucher> list = voucherRepo.findAll();
		List<Voucher> expiredList = new ArrayList<>();
		for (Voucher v : list) {
			LocalDate date = LocalDate.now();
			if (v.getExpiryDate().isBefore(date)) {
				expiredList.add(v);
			}
		}
		if (expiredList.isEmpty()) {
			throw new NoVoucherPresentException();
 
		} else {
			return expiredList;
		}
	}
 
	@Override
	public Voucher getVoucherById(String id) throws NoVoucherPresentException {
		Optional<Voucher> opt = voucherRepo.findById(id);
		if (opt.isPresent()) {
			return opt.get();
		} else {
			throw new NoVoucherPresentException();
		}
 
	}

	@Override
	public Voucher assignUserEmail(String voucherId,String userEmail) throws NoVoucherPresentException {
		Optional<Voucher> opt = voucherRepo.findById(voucherId);
		if(opt.isPresent())
		{
			Voucher voucher = opt.get();
			voucher.setIssuedTo(userEmail);
			return voucherRepo.save(voucher);
			 
		}else {
			throw new NoVoucherPresentException();
		}
		
		
	}

	@Override
	public String removeVoucherById(String id) throws NoVoucherPresentException {
		
		Optional<Voucher> voucher = voucherRepo.findById(id);
		
		if(voucher.isEmpty())
		{
			throw new NoVoucherPresentException();
		}
		
		voucherRepo.deleteById(id);
		
		return "Voucher Deleted Successfully";
	}

	@Override
	public List<Voucher> getAllVoucherWhichAreAssignd() throws NoVoucherPresentException {
		List<Voucher> list = voucherRepo.findAll();
		List<Voucher> expiredList = new ArrayList<>();
		LocalDate date = LocalDate.now();
		for (Voucher v : list) {
			
			if (v.getIssuedTo()!=null && v.getExpiryDate().isAfter(date)) {
				expiredList.add(v);
			}
		}
		if (expiredList.isEmpty()) {
			throw new NoVoucherPresentException();
 
		} else {
			return expiredList;
		}
		
	}

	@Override
	public List<Voucher> getAllVoucherWhichAreAssignedButNotUtilized() throws NoVoucherPresentException {
	    List<Voucher> vouchers = voucherRepo.findAll();

	    if (vouchers.isEmpty()) {
	        throw new NoVoucherPresentException();
	    }

	    return vouchers.stream()
	            .filter(this::isVoucherAssignedButNotUtilized)
	            .toList();
	}

	private boolean isVoucherAssignedButNotUtilized(Voucher voucher) {
	    if (voucher.getIssuedTo() != null) {
	        List<VoucherRequest> requests = reqClient.getAllVouchersByCandidateEmail(voucher.getIssuedTo()).getBody();

	        return requests != null && requests.stream()
	                .anyMatch(request -> isRequestForVoucherWithPendingExamResult(voucher, request));
	    }

	    return false;
	}

	private boolean isRequestForVoucherWithPendingExamResult(Voucher voucher, VoucherRequest request) {
	    return voucher.getVoucherCode().equals(request.getVoucherCode()) &&
	            request.getExamResult().equalsIgnoreCase("pending");
	}


}
